#!/usr/bin/env python3
import sys
from typing import List
from pydantic import BaseModel, field_validator                     # Base class for data models with validation, decorator for checks, and error type
from llm_api import ask_openai                                      # Import API call function

class ParserModel(BaseModel):                                       # PromptModel class inherits from BaseModel
    messageFlag: bool = False
    filenameFlag: bool = False

    # @field_validator("prompt")                                      # declare custom validation for name
    # def not_empty(cls, value: str) -> str:                          # class and string as inputs
    #     if not value or value.strip() == "":
    #         raise ValueError("Prompt must not be empty.")
    #     return value
    
    @field_validator("messageFlag", "filenameFlag")
    def flag_must_be_bool(cls, value):
        if not isinstance(value, bool):
            raise ValueError("Flags must be boolean")
        return value

def parse_ordered_args(args) -> List[str]:
    """
    Parse argv manually to support interleaved -m/--message and -f/--file flags,
    preserving their order in the input.
    """
    parser = ParserModel()
    i = 0
    prompts: List[str] = []
    while i < len(args):
        arg = args[i]
        if arg in ("-m", "--message"):
            parser.messageFlag = True                           # There's no ablity to use filenames "-m" or "-message"
            parser.filenameFlag = False
        elif arg in ("-f", "--file"):                           # There's no ablity to write a message with just -f or -file, or such filename
            parser.messageFlag = False
            parser.filenameFlag = True
        elif parser.messageFlag:
            prompts.append(arg)
        elif parser.filenameFlag:
            try:
                with open(arg, "r") as f:
                    content = f.read()
                    prompts.append(content)
            except OSError as e:
                print(f"Failed reading file {arg}: {e}", file=sys.stderr)
                raise sys.exit(1)
        else:                                                   # Comes when no message or filename flags have been made
            raise ValueError(f"Unexpected argument {args[i]}")
        i += 1
    return prompts

def main() -> None:
    testBool: bool = False
    args = sys.argv[1:]                                             # Cut out the gill command

    print(f"args are: ", args)

    if args[0] == "--test":
        testBool = True
        args = args[1:]

    print(f"args, testBool are ", args, testBool)

    try:
        prompts = parse_ordered_args(args)
        print("Prompts are: ", prompts)
    except ValueError as e:
        print(f"Argument error: {e}", file=sys.stderr)
        raise sys.exit(1)

    if not prompts:
        print("Error: Provide at least one -m or -f option.", file=sys.stderr)
        raise sys.exit(1)

    # Concatenate all prompts with some delimiter (e.g., two newlines)
    combined_prompt = "\n\n".join(prompts)

    if testBool:
        print(combined_prompt)
    else:
        # Call OpenAI API function
        try:
            response = ask_openai(combined_prompt)
            print(response)
        except Exception as e:
            print(f"OpenAI API error: {e}", file=sys.stderr)
            raise sys.exit(1)

if __name__ == "__main__":
    main()