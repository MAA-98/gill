#!/usr/bin/env python3
import typer
from pydantic import BaseModel, field_validator, ValidationError    # Base class for data models with validation, decorator for checks, and error type

class NameModel(BaseModel):                                         # NameModel class inherits from BaseModel
    name: str                                                       # properties name, type string

    @field_validator("name")                                        # declare custom validation for name
    def not_empty(cls, value: str) -> str:                          # class and string as inputs
        if not value or value.strip() == "":
            raise ValueError("Name must not be empty.")
        return value

def main(name: str) -> None:
    try:
        data = NameModel(name=name)
        print(f"Hello, {data.name}!")
    except ValidationError as exc:
        typer.echo(f"Error: {exc}", err=True)
        raise typer.Exit(code=1)

if __name__ == "__main__":
    typer.run(main)